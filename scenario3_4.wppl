const p = 0.75
const k = 20
const privateWeight = 1

const obss = [false,false,true,true,true]  // A A B B B
const privateInfo = true  // B

var simVote = function(count, groundTrue, n, obss, privateInfo) {  
  if (n == obss.length) {
    observe(Bernoulli({p: (groundTrue? p : (1-p))}), privateInfo)
    var privCount = count + (privateInfo? privateWeight: 0)
    return flip(privCount/(k + n + privateWeight))
  }
  else {  
    var yesInfo = groundTrue? flip(p) : flip(1-p)
    var privCount = count + (yesInfo? privateWeight: 0)
    var pubCount = count + (yesInfo? 1: 0)
    observe(Bernoulli({p: privCount/(k + n + privateWeight)}), obss[n])
    return simVote(pubCount, groundTrue, n + 1, obss)
  }
}

var run = function(obss, privateInfo) {
  var model = function() {
    // make first vote less salient
    var gTrue = flip(0.5)
    var zCount = gTrue? sample(Binomial({p: p, n: k})): sample(Binomial({p: (1-p), n: k}))
    return simVote(zCount, gTrue, 0, obss, privateInfo)
  }
  
  var dist = Infer({method: "MCMC", samples: 100000}, model)
  print(Math.exp(dist.score(true)))
}

// for debugging:
// model(obs1)
// run(obs1)

run([], privateInfo)
run(obss.slice(0, 1), privateInfo)
run(obss.slice(0, 2), privateInfo)
run(obss.slice(0, 3), privateInfo)
run(obss.slice(0, 4), privateInfo)
run(obss.slice(0, 5), privateInfo)
